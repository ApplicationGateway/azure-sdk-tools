// ----------------------------------------------------------------------------------
//
// Copyright Microsoft Corporation
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ----------------------------------------------------------------------------------

namespace Microsoft.WindowsAzure.Commands.ServiceManagement.IaaS.Extensions.MicrosoftAntimalware
{
    using System;
    using System.Linq;
    using System.Text;
    using System.Xml;
    using Newtonsoft.Json;

    public class VirtualMachineMicrosoftAntimalwareExtensionCmdletBase : VirtualMachineExtensionCmdletBase
    {
        // Microsoft Antimalware 
        protected const string VirtualMachineMicrosoftAntimalwareExtensionNoun = "AzureVMMicrosoftAntimalwareExtension";
        protected const string MicrosoftAntimalwareExtensionNamespace = "Microsoft.Azure.Security";
        protected const string MicrosoftAntimalwareExtensionName = "IaaSAntimalware";
        protected const string MicrosoftAntimalwareExtensionReferenceName = "IaaSAntimalware";
        protected const string MicrosoftAntimalwareExtensionDefaultVersion = "1.*";
        protected const string MicrosoftAntimalwareExtensionPublicConfigurationTemplate = "{{ \"xmlCfg\": \"{0}\" }}";
        public virtual string AntimalwareConfigFile { get; set; }
        public virtual XmlDocument AntimalwareConfiguration { get; set; }

        // Microsoft Diagnostics
        protected const string DefaultEndpoint = @"https://core.windows.net";
        protected const string StorageAccountElementName = "StorageAccount";
        protected const string DiagnosticsExtensionNamespace = "Microsoft.Azure.Diagnostics";
        protected const string DiagnosticsExtensionName = "IaaSDiagnostics";
        protected const string DiagnosticsExtensionReferenceName = "IaaSDiagnostics";
        protected const string DiagnosticsConfigXmlNamespace = @"http://schemas.microsoft.com/ServiceHosting/2010/10/DiagnosticsConfiguration";
        protected const string DiagnosticsConfigElementName = "WadCfg";
        protected const string DiagnosticsConfigNodeName = "DiagnosticMonitorConfiguration";
        protected const string DiagnosticsConfigAntimalwareProviderToken = @"Microsoft Antimalware";
        protected const string DiagnosticsConfigWindowsEventLogNodeName = @"WindowsEventLog";
        protected const string StorageNameAttrStr = "name";

        protected const string DiagnosticsDefaultConfigNewXmlStr = @"<DiagnosticMonitorConfiguration><WindowsEventLog scheduledTransferPeriod=""PT1M""><DataSource name=""System!*[System[Provider[@Name='Microsoft Antimalware']]]"" /></WindowsEventLog></DiagnosticMonitorConfiguration>";
        protected const string DiagnosticsDefaultConfigMergeXmlWithoutExistingEventLogNode = @"<WindowsEventLog scheduledTransferPeriod=""PT1M""><DataSource name=""System!*[System[Provider[@Name='Microsoft Antimalware']]]"" /></WindowsEventLog>";
        protected const string DiagnosticsDefaultConfigMergeXmlWithExistingEventLogNode = @"<DataSource name=""System!*[System[Provider[@Name='Microsoft Antimalware']]]"" />";
        public virtual XmlDocument AntimalwareMonitoringConfig { get; set; }
        protected string StorageKey { get; set; }
        protected string ConnectionQualifiers { get; set; }
        protected string DefaultEndpointsProtocol { get; set; }
        public virtual string StorageAccountName { get; set; }

        public VirtualMachineMicrosoftAntimalwareExtensionCmdletBase()
        {
            base.publisherName = MicrosoftAntimalwareExtensionNamespace;
            base.extensionName = MicrosoftAntimalwareExtensionName;
            base.ReferenceName = MicrosoftAntimalwareExtensionReferenceName;
        }

        protected string GetXmlCfgFromJson(string jsonConfig)
        {
            string xmlString = null;
            if (!string.IsNullOrWhiteSpace(jsonConfig))
            {
                try
                {
                    Newtonsoft.Json.Linq.JObject jObject = Newtonsoft.Json.Linq.JObject.Parse(jsonConfig);
                    string base64EncodedXml = (string)jObject["xmlCfg"];
                    if (!string.IsNullOrWhiteSpace(base64EncodedXml))
                    {
                        byte[] data = Convert.FromBase64String(base64EncodedXml);
                        xmlString = Encoding.UTF8.GetString(data);
                    }
                }
                catch (Exception)
                {
                }
            }
            return xmlString;
        }

        protected void ValidateStorageAccount()
        {
            var storageService = this.StorageClient.StorageAccounts.Get(StorageAccountName);
            if (storageService == null)
            {
                throw new Exception(string.Format("ServiceExtensionCannotFindStorageAccountName ({0})", StorageAccountName));
            }

            var storageKeys = this.StorageClient.StorageAccounts.GetKeys(storageService.StorageAccount.Name);
            if (storageKeys == null || storageKeys.PrimaryKey == null || storageKeys.SecondaryKey == null)
            {
                throw new Exception(string.Format("ServiceExtensionCannotFindStorageAccountKey ({0})", StorageAccountName));
            }
            StorageKey = storageKeys.PrimaryKey != null ? storageKeys.PrimaryKey : storageKeys.SecondaryKey;
        }

        protected VirtualMachineMicrosoftAntimalwareExtensionContext GetDiagnosticsExtensionContext()
        {
            var extensionRefs =
                string.IsNullOrEmpty(ReferenceName) && string.IsNullOrEmpty(ExtensionName) ?
                ResourceExtensionReferences : GetPredicateExtensionList();

            return extensionRefs == null ? null : extensionRefs.Select(
                r => new VirtualMachineMicrosoftAntimalwareExtensionContext
                {
                    ExtensionName = r.Name,
                    Publisher = r.Publisher,
                    ReferenceName = r.ReferenceName,
                    Version = r.Version,
                    PublicConfiguration = IsLegacyExtension(r.Name, r.Publisher, r.Version) ? GetConfiguration(r) : GetConfiguration(r, PublicTypeStr),
                    State = r.State,
                    AntimalwareMonitoringConfiguration = GetXmlCfgFromJson(IsLegacyExtension(r.Name, r.Publisher, r.Version) ? GetConfiguration(r) : GetConfiguration(r, PublicTypeStr))
                }).Where(
                    r => r.ExtensionName == VirtualMachineMicrosoftAntimalwareExtensionCmdletBase.DiagnosticsExtensionName
                ).FirstOrDefault();
        }
    }
}
